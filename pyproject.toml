[tool.poetry]
name = "amazon-product-search-dense-retrieval"
version = "0.1.0"
description = ""
authors = ["rejasupotaro <takiguchi0817@gmail.com>"]
readme = "README.md"
packages = [{include = "amazon_product_search_dense_retrieval", from = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
pandas = "^1.5.0"
pytest = "^7.3.1"
transformers = "^4.28.1"
fugashi = {extras = ["unidic"], version = "^1.2.0"}
unidic-lite = "^1.0.8"
sentencepiece = "^0.1.99"
torch = "^2.0.0"
annoy = "^1.17.2"
sentence-transformers = "^2.2.2"
more-itertools = "^9.1.0"
onnx = "^1.14.0"
onnxruntime = "^1.15.1"
lightning = "^2.2.0.post0"

[tool.poetry.group.dev.dependencies]
mypy = "^1.2.0"
invoke = "^2.1.1"
ruff = "^0.0.265"
black = "^23.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
# For available rules, see https://beta.ruff.rs/docs/rules/
select = [
    "F",  # Pyflakes
    "E",  # pydocstyle
    "W",  # pydocstyle
    "C90",  # mccabe
    "I",  # isort
    "N",  # pep8-naming
    "YTT",  # flake8-2020
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "ISC",  # flake8-implicit-str-concat
    "Q",  # flake8-quotes
    "PT",  # flake8-pytest-style
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "RUF",  # Ruff-specific rules
]
line-length = 120

[tool.ruff.isort]
known-first-party = [
    "amazon_product_search_dense_retrieval",
]

[tool.mypy]
python_version = "3.10"
mypy_path = ["src"]
ignore_missing_imports = true
